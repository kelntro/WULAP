import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.black90002.withOpacity(0.5),
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 14.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray800,
          fontSize: 12.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.purpleA700,
          fontSize: 36.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w500,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 32.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.purpleA700,
          fontSize: 24.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray60003,
          fontSize: 12.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 10.fSize,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'ABeeZee',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray800,
          fontSize: 16.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 14.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF27005D),
    primaryContainer: Color(0XFFF21E1E),
    secondaryContainer: Color(0XFFF9F7F4),

    // Error colors
    errorContainer: Color(0XFF181D20),
    onError: Color(0X3F27005D),
    onErrorContainer: Color(0XFFABABAB),

    // On colors(text colors)
    onPrimary: Color(0XFF747070),
    onPrimaryContainer: Color(0XFF000E07),
    onSecondaryContainer: Color(0XFF441F78),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amberA400 => Color(0XFFFFCC00);

  // Black
  Color get black900 => Color(0XFF010F07);
  Color get black90001 => Color(0XFF020202);
  Color get black90002 => Color(0XFF000000);

  // Blue
  Color get blueA400 => Color(0XFF1877F2);

  // BlueGray
  Color get blueGray100 => Color(0XFFD4D4DF);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray300 => Color(0XFF94A3B8);
  Color get blueGray400 => Color(0XFF8E8E93);
  Color get blueGray40001 => Color(0XFF898A8D);
  Color get blueGray40002 => Color(0XFF868686);
  Color get blueGray40077 => Color(0X777D869E);
  Color get blueGray500 => Color(0XFF64748B);
  Color get blueGray700 => Color(0XFF475569);
  Color get blueGray800 => Color(0XFF372E52);
  Color get blueGray900 => Color(0XFF33363F);
  Color get blueGray90001 => Color(0XFF1E293B);

  // BlueGrayf
  Color get blueGray9000f => Color(0X0F323247);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFEBD1B9);
  Color get deepOrange600 => Color(0XFFF24E1E);

  // DeepPurple
  Color get deepPurple400 => Color(0XFF8555C7);
  Color get deepPurpleA100 => Color(0XFFCE93F9);
  Color get deepPurpleA700 => Color(0XFF5F05DB);

  // Gray
  Color get gray100 => Color(0XFFF6F6F9);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray10002 => Color(0XFFF2F2F7);
  Color get gray10003 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray20001 => Color(0XFFE7E7E7);
  Color get gray20002 => Color(0XFFF0F0F0);
  Color get gray20003 => Color(0XFFEFEEEE);
  Color get gray20004 => Color(0XFFEAEAEA);
  Color get gray20005 => Color(0XFFEFEBE8);
  Color get gray300 => Color(0XFFE2DBD5);
  Color get gray400 => Color(0XFFC7C7CC);
  Color get gray40001 => Color(0XFFC9C1B9);
  Color get gray40033 => Color(0X33C8C8C8);
  Color get gray50 => Color(0XFFF9F2FF);
  Color get gray500 => Color(0XFFA29696);
  Color get gray50001 => Color(0XFFAFA8A1);
  Color get gray50002 => Color(0XFF9F9F9F);
  Color get gray600 => Color(0XFF858585);
  Color get gray60001 => Color(0XFF757575);
  Color get gray60002 => Color(0XFF7C7B7A);
  Color get gray60003 => Color(0XFF6C6C6C);
  Color get gray700 => Color(0XFF666666);
  Color get gray70001 => Color(0XFF626262);
  Color get gray70019 => Color(0X19676767);
  Color get gray800 => Color(0XFF3C3C3C);
  Color get gray80001 => Color(0XFF3F3F3E);
  Color get gray900 => Color(0XFF222222);
  Color get gray90001 => Color(0XFF191817);

  // Grayc
  Color get gray3004c => Color(0X4CE4E4E4);
  Color get gray9000c => Color(0X0C021F2C);

  // Green
  Color get green300 => Color(0XFF78C4A4);
  Color get green600 => Color(0XFF27AE60);

  // Indigo
  Color get indigo100 => Color(0XFFBCD0EA);

  // Orange
  Color get orange400 => Color(0XFFFFA732);

  // Pink
  Color get pink300 => Color(0XFFEF5193);

  // Purple
  Color get purple100 => Color(0XFFDBAAFF);
  Color get purple50 => Color(0XFFF7EBFF);
  Color get purple5001 => Color(0XFFEACCFF);
  Color get purple900 => Color(0XFF4F2C80);
  Color get purpleA100 => Color(0XFFD194FF);
  Color get purpleA200 => Color(0XFFB54FFF);
  Color get purpleA700 => Color(0XFF9400FF);
  Color get purpleA70047 => Color(0X47A120FF);

  // Red
  Color get redA400 => Color(0XFFFF2525);
  Color get redA700 => Color(0XFFFF0000);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow800 => Color(0XFFEEA634);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
